.\"
.\" Copyright (c) 2020 Scott Bennett <scottb@fastmail.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd April 17, 2020
.Dt Y86_INSTRUCTIONS 7
.Os
.Sh NAME
.Nm y86_instructions
.Nd Y86 Instruction Set Reference

.Sh DESCRIPTION
The Y86 instruction set is a subset
.Pq in spirit
of the IA32
.Pq Dq x86
instruction set.
There are not as many instruction types as IA32 and the instructions have
a simpler encoding.

.Ss Instructions
Y86 instructions have a two-byte encoding.
The first byte indicates the instruction type
.Po
.Ql pushl ,
.Ql popl ,
.Ql irmovl ,
etc.
.Pc .
The second byte gives the source and destination registers
.Pq if applicable ,
and are denoted rA and rB, respectively.
The high-order 4 bits of the first byte are the
.Sy instruction code ,
or
.Dq icode .
The low-order 4 bits of the first byte are the
.Sy function code ,
or
.Dq ifun .
The
.Sy instruction code
differentiates each instruction, whereas the
.Sy function codes
differentiate subsets of related instructions
.Po
e.g. the
.Dq jXX
and
.Dq OPl
families have the same icode, but a differing ifun
.Pc .
Instruction encodings follow:
.Pp
.TS
allbox tab(:);
c    c s s s s
a    c c c s s
a    c c c s s
a    c c c c c
aw18 c c c c cw20
a    c c c c c
a    c c c c c
a    c c c c c
a    c c c s s
a    c c c s s
a    c c c s s
a    c c c c c
a    c c c c cz.
Instruction:Encoding
halt:0:0:
nop:1:0:
rrmovl rA, rB:2:fn:rA:rB:
irmovl V, rB:3:0:8:rB:V
rmmovl rA, D(rB):4:0:rA:rB:D
mrmovl D(rB), rA:5:0:rA:rB:D
OPl rA, rB:6:fn:rA:rB:
jXX Dest:7:fn:Dest
call Dest:8:fn:Dest
ret:9:0:
pushl rA:A:0:rA:8:
popl rA:B:0:rA:8:
.TE

.Ss Arithmetic and Logical Operations
.Pp
Arithmetic and logical operations are collectively abbreviated as
.Dq OPl .
Encodings for these operations differ only by
.Sy function code .
These instructions set condition codes as a side effect.
Each supported operation and its encoding is listed below:
.Pp
.TS
allbox tab(:);
c    c s s s
aw18 c c c c.
Instruction:Encoding
addl rA, rB:6:0:rA:rB
subl rA, rB:6:1:rA:rB
andl rA, rB:6:2:rA:rB
xorl rA, rB:6:3:rA:rB
.TE

.Ss Conditional Move Instructions
The conditional move instructions are generically referred to as
.Dq cmovXX .
These instruction encodings differ from the unconditional move instruction
.Pq Ql rrmovl
only by
.Sy function code .
.Ql rrmovl
unconditionally copies a value from source to destination register.
The
.Dq cmovXX
instructions copy a value from source to destination register when some condition
is met.
.Dq cmovXX
instruction encodings are shown below:
.Pp
.TS
allbox tab(:);
c    c s s s
aw18 c c c c.
Instruction:Encoding
cmovle rA, rB:2:1:rA:rB
cmovl  rA, rB:2:2:rA:rB
cmove  rA, rB:2:3:rA:rB
cmovne rA, rB:2:4:rA:rB
cmovge rA, rB:2:5:rA:rB
cmovg  rA, rB:2:6:rA:rB
.TE

.Ss Jump Instructions
The set of jump instructions are generically referred to as
.Dq jXX .
Instruction encodings differ only by
.Sy function code .
The
.Dq jXX
instructions encode the full destination address in the instruction,
as opposed to the PC-relative addressing in IA32.
.Dq jXX
encodings are shown below:
.Pp
.TS
allbox tab(:);
c    c s s
aw18 c c cw20.
Instruction:Encoding
jmp Dest:7:0:Dest
jle Dest:7:1:Dest
jl  Dest:7:2:Dest
je  Dest:7:3:Dest
jne Dest:7:4:Dest
jge Dest:7:5:Dest
jg  Dest:7:6:Dest
.TE

.Ss Registers

.Sh EXAMPLES
